<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WYJcode</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wyjcode.github.io/"/>
  <updated>2019-07-07T06:33:01.895Z</updated>
  <id>https://wyjcode.github.io/</id>
  
  <author>
    <name>WYJcode</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CCF-201509-4-高速公路(强连通分量)</title>
    <link href="https://wyjcode.github.io/2019/07/06/CCF-201509-4-%E9%AB%98%E9%80%9F%E5%85%AC%E8%B7%AF-%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    <id>https://wyjcode.github.io/2019/07/06/CCF-201509-4-高速公路-强连通分量/</id>
    <published>2019-07-06T04:03:34.264Z</published>
    <updated>2019-07-07T06:33:01.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　某国有n个城市，为了使得城市间的交通更便利，该国国王打算在城市之间修一些高速公路，由于经费限制，国王打算第一阶段先在部分城市之间修一些单向的高速公路。<br>　　现在，大臣们帮国王拟了一个修高速公路的计划。看了计划后，国王发现，有些城市之间可以通过高速公路直接（不经过其他城市）或间接（经过一个或多个其他城市）到达，而有的却不能。如果城市A可以通过高速公路到达城市B，而且城市B也可以通过高速公路到达城市A，则这两个城市被称为便利城市对。<br>　　国王想知道，在大臣们给他的计划中，有多少个便利城市对。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>　　输入的第一行包含两个整数n, m，分别表示城市和单向高速公路的数量。<br>　　接下来m行，每行两个整数a, b，表示城市a有一条单向的高速公路连向城市b。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>　　输出一行，包含一个整数，表示便利城市对的数量。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><p>5 5<br>1 2<br>2 3<br>3 4<br>4 2<br>3 5</p><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><p>3</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>题目要求的是强连通分量。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#define MAX_V 100000</span><br><span class="line">using namespace std;</span><br><span class="line">int V; </span><br><span class="line">vector&lt;int&gt; G[MAX_V];</span><br><span class="line">vector&lt;int&gt; rG[MAX_V];</span><br><span class="line">vector&lt;int&gt; vs;</span><br><span class="line">bool used[MAX_V]; </span><br><span class="line">int cmp[MAX_V];</span><br><span class="line"></span><br><span class="line">int N, M;</span><br><span class="line">int A[MAX_V], B[MAX_V];</span><br><span class="line"></span><br><span class="line">void add_edge(int from,int to) &#123;</span><br><span class="line">G[from].push_back(to);</span><br><span class="line">rG[to].push_back(from);</span><br><span class="line">&#125;</span><br><span class="line">void dfs(int v)&#123;</span><br><span class="line">used[v] = true; </span><br><span class="line">for (int i= 0; i &lt; G[v].size(); i++) &#123;</span><br><span class="line">if (!used[G[v][i]]) dfs(G[v][i]);</span><br><span class="line">&#125;</span><br><span class="line">vs. push_back (v);</span><br><span class="line">&#125;</span><br><span class="line">void rdfs(int v,int k)&#123;</span><br><span class="line">used[v] = true; </span><br><span class="line">cmp[v] = k; </span><br><span class="line">for (int i= 0; i &lt; rG[v].size(); i++) &#123;</span><br><span class="line">if (!used[rG[v][i]]) rdfs(rG[v][i], k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int sec() &#123;</span><br><span class="line">memset(used, 0, sizeof (used));</span><br><span class="line">vs.clear(); </span><br><span class="line">for(int v = 0; v &lt; V; v++) &#123;</span><br><span class="line">if (!used[v]) dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">memset(used, 0, sizeof (used));</span><br><span class="line">int k = 0; </span><br><span class="line">for (int i = vs.size()-1; i &gt;= 0; i--)&#123;</span><br><span class="line">if (!used[vs[i]]) rdfs(vs[i], ++k);</span><br><span class="line">&#125;</span><br><span class="line">return k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void solve() &#123; </span><br><span class="line">V = N; </span><br><span class="line">for (int i = 0; i &lt; M; i++) &#123;</span><br><span class="line">add_edge(A[i] - 1, B[i] - 1);</span><br><span class="line">&#125;</span><br><span class="line">int n = sec(); </span><br><span class="line">int u = 0, num = 0; </span><br><span class="line">for(int i=1; i&lt;=n; i++)&#123;</span><br><span class="line">u=0;</span><br><span class="line">for(int j=0; j&lt;N; j++)&#123;</span><br><span class="line">if(cmp[j]==i)&#123;</span><br><span class="line">u++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(u&gt;=2)&#123;</span><br><span class="line">num+=u*(u-1)/2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;, num); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;N&gt;&gt;M;</span><br><span class="line">for(int i = 0; i &lt; M; i++)&#123;</span><br><span class="line">cin&gt;&gt;A[i]&gt;&gt;B[i];</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;　　某国有n个城市，为了使得城市间的交通更便利，该国国王打算在城市之间修一些高速公路，由于经费限制，国王打算第一阶段先在部分
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wyjcode.github.io/2019/07/03/hello-world/"/>
    <id>https://wyjcode.github.io/2019/07/03/hello-world/</id>
    <published>2019-07-03T01:39:23.765Z</published>
    <updated>2019-07-05T02:21:31.058Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
