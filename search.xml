<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[网络流-最大流]]></title>
    <url>%2F2019%2F07%2F07%2F%E7%BD%91%E7%BB%9C%E6%B5%81-%E6%9C%80%E5%A4%A7%E6%B5%81%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[CCF-201509-4-高速公路]]></title>
    <url>%2F2019%2F07%2F06%2FCCF-201509-4-%E9%AB%98%E9%80%9F%E5%85%AC%E8%B7%AF-%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F%2F</url>
    <content type="text"><![CDATA[问题描述 某国有n个城市，为了使得城市间的交通更便利，该国国王打算在城市之间修一些高速公路，由于经费限制，国王打算第一阶段先在部分城市之间修一些单向的高速公路。 现在，大臣们帮国王拟了一个修高速公路的计划。看了计划后，国王发现，有些城市之间可以通过高速公路直接（不经过其他城市）或间接（经过一个或多个其他城市）到达，而有的却不能。如果城市A可以通过高速公路到达城市B，而且城市B也可以通过高速公路到达城市A，则这两个城市被称为便利城市对。 国王想知道，在大臣们给他的计划中，有多少个便利城市对。 输入格式 输入的第一行包含两个整数n, m，分别表示城市和单向高速公路的数量。 接下来m行，每行两个整数a, b，表示城市a有一条单向的高速公路连向城市b。 输出格式 输出一行，包含一个整数，表示便利城市对的数量。 样例输入5 51 22 33 44 23 5 样例输出3 解题思路题目要求的是强连通分量。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;cstdio&gt;#include&lt;vector&gt;#define MAX_V 100000using namespace std;int V; vector&lt;int&gt; G[MAX_V];vector&lt;int&gt; rG[MAX_V];vector&lt;int&gt; vs;bool used[MAX_V]; int cmp[MAX_V];int N, M;int A[MAX_V], B[MAX_V];void add_edge(int from,int to) &#123; G[from].push_back(to); rG[to].push_back(from);&#125;void dfs(int v)&#123; used[v] = true; for (int i= 0; i &lt; G[v].size(); i++) &#123; if (!used[G[v][i]]) dfs(G[v][i]); &#125; vs. push_back (v);&#125;void rdfs(int v,int k)&#123; used[v] = true; cmp[v] = k; for (int i= 0; i &lt; rG[v].size(); i++) &#123; if (!used[rG[v][i]]) rdfs(rG[v][i], k); &#125;&#125;int sec() &#123; memset(used, 0, sizeof (used)); vs.clear(); for(int v = 0; v &lt; V; v++) &#123; if (!used[v]) dfs(v); &#125; memset(used, 0, sizeof (used)); int k = 0; for (int i = vs.size()-1; i &gt;= 0; i--)&#123; if (!used[vs[i]]) rdfs(vs[i], ++k); &#125; return k;&#125;void solve() &#123; V = N; for (int i = 0; i &lt; M; i++) &#123; add_edge(A[i] - 1, B[i] - 1); &#125; int n = sec(); int u = 0, num = 0; for(int i=1; i&lt;=n; i++)&#123; u=0; for(int j=0; j&lt;N; j++)&#123; if(cmp[j]==i)&#123; u++; &#125; &#125; if(u&gt;=2)&#123; num+=u*(u-1)/2; &#125; &#125; printf(&quot;%d\n&quot;, num); &#125;int main()&#123; cin&gt;&gt;N&gt;&gt;M; for(int i = 0; i &lt; M; i++)&#123; cin&gt;&gt;A[i]&gt;&gt;B[i]; &#125; solve(); return 0;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F03%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
